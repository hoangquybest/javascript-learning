// M·∫£ng

// ************************************************************************************
// C√≥ 2 c√°ch t·∫°o m·∫£ng
// array literal
const students1 = [];

// array constructor
const students = new Array(); // global object

// ************************************************************************************
// v√≠ d·ª• v·ªÅ m·∫£ng
// M·∫£ng ph·ª©c t·∫°p [0, false, undefined, null, "me", ["me", false, 1200, []]]
// M·∫£ng ƒë∆°n gi·∫£n [false, 0 , undefined]
// [1,2,3,4,5] ["a", "b", "c"]
// [] empty array -> m·∫£ng r·ªóng

// ************************************************************************************
// index
// length: ƒë·ªô d√†i c·ªßa m·∫£ng
const students2 = ["Tuan", "Nam", "Hoai"];
console.log(students2.length); // 3
console.log(students2[5]); // "undefined"

// Ph∆∞∆°ng th·ª©c hay d√πng c·ªßa m·∫£ng
// length

// ************************************************************************************
// reverse - ƒê·∫£o ng∆∞·ª£c c√°c gi√° tr·ªã c·ªßa m·∫£ng
// T·∫°i sao khi g√µ reverse n√≥ l·∫°i kh√¥ng th√™m () hay c√°c method n√≥i chung trong VSCode IntelliSense
// V√¨ const fn = arr.reverse; // l·∫•y reference c·ªßa h√†m, ch∆∞a g·ªçi, mu·ªën g·ªçi th√¨ ph·∫£i t·ª± th√™m ()
// reverse() kh√¥ng t·∫°o ra m·∫£ng m·ªõi. - mutable thay ƒë·ªïi m·∫£ng ban ƒë·∫ßu n√™n space complexity l√† O(1) v√¨ kh√¥ng t·∫°o m·∫£ng m·ªõi ch·ªâ swap tr√™n m·∫£ng c≈©
// Time complexity: O(n/2) v√¨ ch·ªâ c·∫ßn duy·ªát 1 n·ª≠a m·∫£ng ƒë·ªÉ swap ƒë·∫ßu v·ªõi cu·ªëi, th·ª© 2 v·ªõi th·ª© 2 t·ª´ cu·ªëi...
// N√≥ ƒë·∫£o ng∆∞·ª£c c√°c ph·∫ßn t·ª≠ ngay tr√™n m·∫£ng ban ƒë·∫ßu v√† tr·∫£ v·ªÅ c√πng ch√≠nh m·∫£ng ƒë√≥.
console.log(students2.reverse()); // tuy tr√™n console t·∫°i th·ªùi ƒëi·ªÉm log l√† 3 nh∆∞ng expand ra th√¨ n√≥ ƒë√£ l√† 4 ph·∫ßn t·ª≠ r·ªìi
students2.push("Em");
console.log(students2);

// ************************************************************************************
// join - n·ªëi c√°c ph·∫ßn t·ª≠ trong m·∫£ng th√†nh chu·ªói
// join() n·ªëi c√°c ph·∫ßn t·ª≠ trong m·∫£ng th√†nh chu·ªói, ngƒÉn c√°ch b·∫±ng d·∫•u ph·∫©y (m·∫∑c ƒë·ªãnh).
// V·ªõi t·ª´ng ph·∫ßn t·ª≠:
// N·∫øu l√† null ho·∫∑c undefined ‚Üí n√≥ coi nh∆∞ chu·ªói r·ªóng "".
// N·∫øu l√† boolean (true / false) ‚Üí n√≥ s·∫Ω ƒë∆∞·ª£c √©p th√†nh "true" ho·∫∑c "false".
// C√°c gi√° tr·ªã kh√°c ‚Üí g·ªçi toString().
const students3 = [null, false, undefined];
console.log(students3.join()); // ,
console.log([null, 2, undefined, 3].join("-"));
// output: "-2--3"
console.log([1, null, 2].join(","));
// output: "1,,2"

// ************************************************************************************
// includes
console.log(students3.includes(undefined)); // true
console.log(students3.includes(false)); // true

// ************************************************************************************
// indexOf - Tr·∫£ v·ªÅ v·ªã tr√≠ c·ªßa ph·∫ßn t·ª≠ t√¨m th·∫•y ƒë·∫ßu ti√™n
// array.indexOf(searchElement, fromIndex);
// searchElement: gi√° tr·ªã mu·ªën t√¨m.
// fromIndex (t√πy ch·ªçn): v·ªã tr√≠ b·∫Øt ƒë·∫ßu t√¨m (m·∫∑c ƒë·ªãnh l√† 0).
// üëâ Tr·∫£ v·ªÅ:
// Index ƒë·∫ßu ti√™n t√¨m th·∫•y.
// -1 n·∫øu kh√¥ng t·ªìn t·∫°i.

console.log(students3.indexOf()); // Kh√¥ng truy·ªÅn g√¨ v√†o th√¨ m·∫∑c ƒë·ªãnh ƒëang t√¨m ki·∫øm undefined th√¨ gi√° tr·ªã tr·∫£ v·ªÅ l√∫c n√†y l√† 2
const numbers = [1, 2, 3, 2, 4];
console.log(numbers.indexOf(2)); // 1 (g·∫∑p s·ªë 2 ƒë·∫ßu ti√™n ·ªü v·ªã tr√≠ 1)
console.log(numbers.indexOf(2, 2)); // 3 (b·∫Øt ƒë·∫ßu t√¨m t·ª´ index 2)
console.log(numbers.indexOf(5)); // -1 (kh√¥ng c√≥ 5 trong m·∫£ng)

const arr = [{}, [], 3, null, undefined, [2, 3], { cls: "hhhh" }];
const isEven = (num) => console.log(num % 2 === 0);
console.log(arr.forEach(isEven));

// {} ‚Üí kh√¥ng convert ƒë∆∞·ª£c sang s·ªë ‚Üí NaN % 2 ‚Üí false
// {} ‚Üí kh√¥ng convert ƒë∆∞·ª£c sang s·ªë ‚Üí NaN % 2 ‚Üí false
// {} ‚Üí kh√¥ng convert ƒë∆∞·ª£c sang s·ªë ‚Üí NaN % 2 ‚Üí false
// {} ‚Üí kh√¥ng convert ƒë∆∞·ª£c sang s·ªë ‚Üí NaN % 2 ‚Üí false
// {} ‚Üí kh√¥ng convert ƒë∆∞·ª£c sang s·ªë ‚Üí NaN % 2 ‚Üí false
// [] ‚Üí khi √©p v·ªÅ s·ªë: Number([]) = 0 ‚Üí 0 % 2 === 0 ‚Üí true
// 3 ‚Üí 3 % 2 = 1 ‚Üí false
// null ‚Üí Number(null) = 0 ‚Üí 0 % 2 === 0 ‚Üí true
// undefined ‚Üí Number(undefined) = NaN ‚Üí false
// [2, 3] ‚Üí Number([2,3]) = NaN ‚Üí false
// { cls: "hhhh" } ‚Üí NaN % 2 ‚Üí false

// ************************************************************************************
// lastIndexOf() -> Tr·∫£ v·ªÅ v·ªã tr√≠ c·ªßa ph·∫ßn t·ª≠ t√¨m th·∫•y cu·ªëi c√πng
console.log(arr.lastIndexOf(undefined)); // 4

// ************************************************************************************
// push - Th√™m ph·∫ßn t·ª≠ v√†o cu·ªëi m·∫£ng
console.log(arr.push("myName")); // 8 - Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ sau khi push

// ************************************************************************************
// unshift - th√™m ph·∫ßn t·ª≠ v√†o ƒë·∫ßu m·∫£ng
console.log(arr.unshift("Trang")); // 9 - tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ sau khi unshift

// ************************************************************************************
// pop - d√πng ƒë·ªÉ xo√° ph·∫ßn t·ª≠ cu·ªëi c√πng trong m·∫£ng
console.log(arr.pop()); // tr·∫£ v·ªÅ ph·∫ßn t·ª≠ b·ªã xo√°

// ************************************************************************************
// shift - xo√° ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n trong m·∫£ng
console.log(arr.shift()); // tr·∫£ v·ªÅ ph·∫ßn t·ª≠ b·ªã xo√°

// ************************************************************************************
/* M·ªôt s·ªë ch√∫ √Ω
- length c√≥ th·ªÉ thay ƒë·ªïi m·∫£ng ban ƒë·∫ßu VD: arr.length = 2 s·∫Ω c·∫Øt ng·∫Øn m·∫£ng l·∫°i
- Kh√¥ng thay ƒë·ªïi m·∫£ng ban ƒë·∫ßu: toString(), at(), join(), concat(), flat(), slice(), toSplice()
- Kh√¥ng thay ƒë·ªïi m·∫£ng ban ƒë·∫ßu: pop(), push(), shift(), unshift(), delete arr[i] (xo√° ph·∫ßn t·ª≠ nh∆∞ng kh√¥ng c·∫≠p nh·∫≠t l·∫°i m·∫£ng g·ªëc), popyWithin(), splice() */
